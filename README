Elias Wilson Jordan Klein

Our file system works as expected in all areas

We chose extra features set B and D. Set B involves renaming and listing all files, which we demo working as expected,
Set D involves Read only files and writing single bytes, which we also show working in our demo. 

Our file system limitation is its maximum of 2014 blocks as well as our limit of 8 charecter file names. 

Below are implementation details about how structures where orginized.

Disk stores blocks of BLOCKSIZE*2 characters, each character representing 4 bits in hex, meaning 2 characters represent one byte

Superblock:
0: 0x5A (magic number)
1-2: 0x0001 (block of root inode)
3-4: block address of inode of currently open file (0x0001 if "nothing" currently open)
5-255: bitmap of free blocks - limits max # of blocks to 8*251 = 2014 blocks

Addressing:
max of 2014 (2^11) blocks requires 11 bits to index so addresses are all 2 bytes
stores first block address of file, each data block's last 2 bytes are dedicated to the address of the next block in the file.
EOF represented by address 0xFFFF, which is always out of range. (0x07ED is the maximum address of our FS)

Inodes:
    0-1: address of first data block
    2-4: total number of bytes in file
    (MAXBLOCKS(2014) - 3 (superblock, root inode, this inode)) * (256 (blocksize) - 2 (addr of next)) - 8(filename) = ~2^19


Data blocks:
    block 0:
    0: 0-File or 1-Directory
    1-8: filename
    ~~any additional metadata here~~
    File:
        9-253: data
        254-255: address of next data block

    Directory:
        9-16: entry filename
        17-18: address of inode of file
        19-249: [repeats 10 bytes at a time]
        254-255: address of next data block (FF if EOF)

    blocks 1+:
    0-253: data
    254-255: address of next data block (FF if EOF)